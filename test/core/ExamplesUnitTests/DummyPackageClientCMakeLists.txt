# @HEADER
# ************************************************************************
#
#            TriBITS: Tribal Build, Integrate, and Test System
#                    Copyright 2013 Sandia Corporation
#
# Under the terms of Contract DE-AC04-94AL85000 with Sandia Corporation,
# the U.S. Government retains certain rights in this software.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the Corporation nor the names of the
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY SANDIA CORPORATION "AS IS" AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SANDIA CORPORATION OR THE
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# ************************************************************************
# @HEADER

#
# This is a dummy CMakeLists.txt file that pulls in a <Project>Config.cmake
# file and reads and prints the vars from it.
#

message("Configuring dummy project in:")
message("  CMAKE_CURRENT_SOURCE_DIR = '${CMAKE_CURRENT_SOURCE_DIR}'")
message("  CMAKE_CURRENT_BINARY_DIR = '${CMAKE_CURRENT_BINARY_DIR}'")
message("DUMMY_PROJECT_NAME = '${DUMMY_PROJECT_NAME}'")
message("FIND_PACKAGE_NAME = '${FIND_PACKAGE_NAME}'")
message("FIND_PACKAGE_COMPONENTS (Input) = '${FIND_PACKAGE_COMPONENTS}'")
message("FIND_PACKAGE_OPTIONAL_COMPONENTS (input) = '${FIND_PACKAGE_OPTIONAL_COMPONENTS}'")
message("CMAKE_PREFIX_PATH = '${CMAKE_PREFIX_PATH}'")
message("EXPORT_VAR_PREFIX = '${EXPORT_VAR_PREFIX}'")

cmake_minimum_required(VERSION 3.17.0)
project(${DUMMY_PROJECT_NAME} NONE)

if (FIND_PACKAGE_COMPONENTS)
  string(REPLACE "," ";" FIND_PACKAGE_COMPONENTS
     "${FIND_PACKAGE_COMPONENTS}")
endif()
message("FIND_PACKAGE_COMPONENTS = '${FIND_PACKAGE_COMPONENTS}'")

if (FIND_PACKAGE_OPTIONAL_COMPONENTS)
  string(REPLACE "," ";" FIND_PACKAGE_OPTIONAL_COMPONENTS
     "${FIND_PACKAGE_OPTIONAL_COMPONENTS}")
endif()
message("FIND_PACKAGE_OPTIONAL_COMPONENTS = '${FIND_PACKAGE_OPTIONAL_COMPONENTS}'")

if (NOT IS_ABSOLUTE "${CMAKE_PREFIX_PATH}")
  set(CMAKE_PREFIX_PATH "${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_PREFIX_PATH}")
endif()

message("Calling: find_package(${FIND_PACKAGE_NAME} REQUIRED COMPONENTS ${FIND_PACKAGE_COMPONENTS} OPTIONAL_COMPONENTS ${FIND_PACKAGE_OPTIONAL_COMPONENTS} )")
#set(CMAKE_FIND_DEBUG_MODE TRUE)
find_package(${FIND_PACKAGE_NAME} REQUIRED
  COMPONENTS ${FIND_PACKAGE_COMPONENTS}
  OPTIONAL_COMPONENTS ${FIND_PACKAGE_OPTIONAL_COMPONENTS} )

message("${FIND_PACKAGE_NAME}_FOUND = '${${FIND_PACKAGE_NAME}_FOUND}'") 
message("${EXPORT_VAR_PREFIX}_CMAKE_BUILD_TYPE = '${${EXPORT_VAR_PREFIX}_CMAKE_BUILD_TYPE}'")
message("${EXPORT_VAR_PREFIX}_CXX_COMPILER = '${${EXPORT_VAR_PREFIX}_CXX_COMPILER}'")
message("${EXPORT_VAR_PREFIX}_C_COMPILER = '${${EXPORT_VAR_PREFIX}_C_COMPILER}'")
message("${EXPORT_VAR_PREFIX}_Fortran_COMPILER = '${${EXPORT_VAR_PREFIX}_Fortran_COMPILER}'")
message("${EXPORT_VAR_PREFIX}_FORTRAN_COMPILER = '${${EXPORT_VAR_PREFIX}_FORTRAN_COMPILER}'")
message("${EXPORT_VAR_PREFIX}_CXX_FLAGS = '${${EXPORT_VAR_PREFIX}_CXX_FLAGS}'")
message("${EXPORT_VAR_PREFIX}_C_FLAGS = '${${EXPORT_VAR_PREFIX}_C_FLAGS}'")
message("${EXPORT_VAR_PREFIX}_Fortran_FLAGS = '${${EXPORT_VAR_PREFIX}_Fortran_FLAGS}'")
message("${EXPORT_VAR_PREFIX}_FORTRAN_FLAGS = '${${EXPORT_VAR_PREFIX}_FORTRAN_FLAGS}'")
message("${EXPORT_VAR_PREFIX}_EXTRA_LD_FLAGS = '${${EXPORT_VAR_PREFIX}_EXTRA_LD_FLAGS}'")
message("${EXPORT_VAR_PREFIX}_SHARED_LIB_RPATH_COMMAND = '${${EXPORT_VAR_PREFIX}_SHARED_LIB_RPATH_COMMAND}'")
message("${EXPORT_VAR_PREFIX}_BUILD_SHARED_LIBS = '${${EXPORT_VAR_PREFIX}_BUILD_SHARED_LIBS}'")
message("${EXPORT_VAR_PREFIX}_LINKER = '${${EXPORT_VAR_PREFIX}_LINKER}'")
message("${EXPORT_VAR_PREFIX}_AR = '${${EXPORT_VAR_PREFIX}_AR}'")
message("${EXPORT_VAR_PREFIX}_INSTALL_DIR = '${${EXPORT_VAR_PREFIX}_INSTALL_DIR}'")
message("${EXPORT_VAR_PREFIX}_INCLUDE_DIRS = '${${EXPORT_VAR_PREFIX}_INCLUDE_DIRS}'")
message("${EXPORT_VAR_PREFIX}_LIBRARY_DIRS = '${${EXPORT_VAR_PREFIX}_LIBRARY_DIRS}'")
message("${EXPORT_VAR_PREFIX}_LIBRARIES = '${${EXPORT_VAR_PREFIX}_LIBRARIES}'")
message("${EXPORT_VAR_PREFIX}_TPL_INCLUDE_DIRS = '${${EXPORT_VAR_PREFIX}_TPL_INCLUDE_DIRS}'")
message("${EXPORT_VAR_PREFIX}_TPL_LIBRARY_DIRS = '${${EXPORT_VAR_PREFIX}_TPL_LIBRARY_DIRS}'")
message("${EXPORT_VAR_PREFIX}_TPL_LIBRARIES = '${${EXPORT_VAR_PREFIX}_TPL_LIBRARIES}'")
message("${EXPORT_VAR_PREFIX}_MPI_LIBRARIES = '${${EXPORT_VAR_PREFIX}_MPI_LIBRARIES}'")
message("${EXPORT_VAR_PREFIX}_MPI_LIBRARY_DIRS = '${${EXPORT_VAR_PREFIX}_MPI_LIBRARY_DIRS}'")
message("${EXPORT_VAR_PREFIX}_MPI_INCLUDE_DIRS = '${${EXPORT_VAR_PREFIX}_MPI_INCLUDE_DIRS}'")
message("${EXPORT_VAR_PREFIX}_MPI_EXEC = '${${EXPORT_VAR_PREFIX}_MPI_EXEC}'")
message("${EXPORT_VAR_PREFIX}_MPI_EXEC_MAX_NUMPROCS = '${${EXPORT_VAR_PREFIX}_MPI_EXEC_MAX_NUMPROCS}'")
message("${EXPORT_VAR_PREFIX}_MPI_EXEC_PRE_NUMPROCS_FLAGS = '${${EXPORT_VAR_PREFIX}_MPI_EXEC_PRE_NUMPROCS_FLAGS}'")
message("${EXPORT_VAR_PREFIX}_MPI_EXEC_NUMPROCS_FLAG = '${${EXPORT_VAR_PREFIX}_MPI_EXEC_NUMPROCS_FLAG}'")
message("${EXPORT_VAR_PREFIX}_MPI_EXEC_POST_NUMPROCS_FLAGS = '${${EXPORT_VAR_PREFIX}_MPI_EXEC_POST_NUMPROCS_FLAGS}'")
message("${EXPORT_VAR_PREFIX}_PACKAGE_LIST = '${${EXPORT_VAR_PREFIX}_PACKAGE_LIST}'")
message("${EXPORT_VAR_PREFIX}_SELECTED_PACKAGE_LIST = '${${EXPORT_VAR_PREFIX}_SELECTED_PACKAGE_LIST}'")
message("${EXPORT_VAR_PREFIX}_TPL_LIST = '${${EXPORT_VAR_PREFIX}_TPL_LIST}'")

set(ALL_PACKAGES_AND_COMPONENTS
  ${FIND_PACKAGE_COMPONENTS} ${FIND_PACKAGE_OPTIONAL_COMPONENTS} )
if (ALL_PACKAGES_AND_COMPONENTS)
  list(REMOVE_DUPLICATES ALL_PACKAGES_AND_COMPONENTS)
endif()
foreach (PACKAGE_NAME ${ALL_PACKAGES_AND_COMPONENTS})
  message("${EXPORT_VAR_PREFIX}_${PACKAGE_NAME}_FOUND = '${${EXPORT_VAR_PREFIX}_${PACKAGE_NAME}_FOUND}'")
endforeach()
message("${EXPORT_VAR_PREFIX}_FOUND = '${${EXPORT_VAR_PREFIX}_FOUND}'")

# Print out the libraries associated with <Package>::all_libs

get_target_property(packageAllLibsInterfaceLinkLibraries
  ${FIND_PACKAGE_NAME}::all_libs  INTERFACE_LINK_LIBRARIES )
message("${FIND_PACKAGE_NAME}::all_libs  INTERFACE_LINK_LIBRARIES:"
  " '${packageAllLibsInterfaceLinkLibraries}'" )

# Print out the libraries associated with <Package>::all_selected_libs

if (TARGET ${FIND_PACKAGE_NAME}::all_selected_libs)
  get_target_property(packageAllSelectedLibsInterfaceLinkLibraries
    ${FIND_PACKAGE_NAME}::all_selected_libs  INTERFACE_LINK_LIBRARIES )
  message("${FIND_PACKAGE_NAME}::all_selected_libs  INTERFACE_LINK_LIBRARIES:"
    " '${packageAllSelectedLibsInterfaceLinkLibraries}'" )
endif()
