#!/usr/bin/env python

usageHelp = r"""egdist [egdist options] [OPTIONS]

Run eg/git recursively over extra repos

Instead of typing

   $ eg [OPTIONS]

type:

  $ egdist [egdist options] [OPTIONS]

This will distribute git options across all git repos listed, including the
base git repo.  The options in [egdist options] are prefixed with '--dist-'
and are are pulled out before running eg/git on the underlying executable.
See --help to see the egdist options.

If --dist-extra-repos="", then the list of extra repos will be read from the
file .egdist.  The format of this file is to have one repo name per line as
in:

   Repo1
   Repo2
   Repo3
   ...

NOTE: If any extra repository does not exist, then it will be ignored and no
output will be produced.  Therefore, be careful to manually verify that the
script recognizes the repositories that you list.  The best way to do that is
to type 'egdist status'.

NOTE: This script has no other dependencies so it can be copied and moved
anywhere and used.

TIPS:

 - Use 'egdist --no-pager <command> ...' to get the full output from
   all extra repos in one contiguous stream which can then be piped
   to 'less' or to a file to be read with emacs or vi (may also want
   to use --dist-no-color as well).

 - 'egdist --help' will run egdist help, not eg/git help.  If you want
   eg/git help, run raw 'eg --help'.

 - By default, egdist will use 'eg' in the environment.  If it can't find 'eg'
   in the environment, it will try to use 'eg' in the same directory as
   'egdist' (which is the case in the home tribits directory).  If it can't
   find this 'eg' it will look for 'git' in the environment.  If it can't find
   'git' it will require that the user specify the eg/git command to run with
   --with-eg-git=<the command>.

 - To exclude processing either the base git repo and/or git repos listed in
   .egdist, pass in --dist-not-base-repo and/or
   --dist-not-extra-repos=RepoX,RepoZ,...  The provides complete control over
   what git repos the given command is run on.

REPO VERSION FILES:

This script also supports the options --dist-version-file=<versionFile> and
--dist-version-file2=<versionFile2> which are used to provide different SHA1
versions for each repo.  Each of these version files is expected to represent
a compatible set of versions of the repos.

The format of these repo version files is a follows:

-----------------------------------------------------
*** Base Git Repo: SomeBaseRepo
e102e27 [Mon Sep 23 11:34:59 2013 -0400] <author1@someurl.com>
First summary message
*** Git Repo: ExtraRepo1
b894b9c [Fri Aug 30 09:55:07 2013 -0400] <author2@someurl.com>
Second summary message
*** Git Repo: ExtraRepo2
97cf1ac [Thu Dec 1 23:34:06 2011 -0500] <author3@someurl.com>
Third summary message
...
-----------------------------------------------------

Each repository entry can have a summary message or not (i.e. use two or three
lines per repo in the file).  A compatible repo version file can be generated
with this script using, for example, using:

   $ egdist log -1 --pretty=format:"%h [%ad] <%ae>%n%s" \
    | grep -v "^$" &> RepoVersion.txt

using three lines per repo, or just:

   $ egdist log -1 --pretty=format:"%h [%ad] <%ae>" \
    | grep -v "^$" &> RepoVersion.txt

using two lines per repo in the output file.

This allows checking out consistent versions of the repos, diffing two
consistent versions of the repos, etc.

To checkout an older set of consistent versions of the set of repos, use:

  $ egdist fetch origin
  $ egdist --dist-version-file=RepoVersion.SomeDate.txt checkout _VERSION_

The '_VERSION_' string will be replaced with the SHA1 for each of the repos.

To tag and branch the set of repos using a consistent set of versions, use:

  $ egdist --dist-version-file=RepoVersion.SomeDate.txt \
    tag -a some_tag _VERSION_

To diff two sets of versions of the repos, for example, use:

  $ egdist --dist-version-file=RepoVersion.NewerDate.txt \
     --dist-version-file2=RepoVersion.OlderDate.txt \
     diff _VERSION_ ^_VERSION2_

Here, _VERSION_ is replaced by the SHA1s listed in RepoVersion.NewerDate.txt
and _VERSION2_ is replaced by the SHA1s listed in RepoVersion.OlderDate.txt.

One can construct any git commit taking one or two different repo version
arguments (SHA1s).

Note that the set of repos listed in the RepoVersion.txt file must be a
super-set of those processed by this script or an error will occur and the
script will stop.
"""

import sys
import os
import subprocess
import commands
import re

from optparse import OptionParser


#
# Helper functions
#


# Get output from command
def getCmndOutput(cmnd):
  return commands.getstatusoutput(cmnd)[1]


# Run a command and syncronize the output
def runCmnd(options, cmnd):
  if options.debug:
    print "*** Running command:", cmnd
  if options.noOpt:
    print cmnd
  else:
    child = subprocess.Popen(cmnd, stdout=subprocess.PIPE).stdout
    output = child.read()
    sys.stdout.flush()
    print output
    sys.stdout.flush()


# Determine if a command exists:
def commandExists(cmnd):
  whichCmnd = getCmndOutput("which "+cmnd)
  #print "whichCmnd =", whichCmnd
  if os.path.exists(whichCmnd):
    return True
  return False


# Get the terminal colors
txtbld=getCmndOutput(r"tput bold")       # Bold
txtblu=getCmndOutput(r"tput setaf 4")    # Blue
txtred=getCmndOutput(r"tput setaf 1")    # Red
txtrst=getCmndOutput(r"tput sgr0")       # Text reset


# Add color to the repo dirs printed out
def addColorToRepoDir(useColor, strIn):
  if useColor:
    return txtbld+txtblu+strIn+txtrst
  return strIn


# Add color to the error messages printed out
def addColorToErrorMsg(useColor, strIn):
  if useColor:
    return txtred+strIn+txtrst
  return strIn


# Get the commandline options
def getCommandlineOps():

  #
  # A) Define the native egdist command-line arguments
  #
  
  clp = OptionParser(usage=usageHelp)
  
  helpArgName = "--help"
  withEgGitArgName = "--with-eg-git"
  extraRepoArgName = "--dist-extra-repos"
  notExtraRepoArgName = "--dist-not-extra-repos"
  notBaseRepoArgName = "--dist-not-base-repo"
  versionFileName = "--dist-version-file"
  versionFile2Name = "--dist-version-file2"
  noColorArgName = "--dist-no-color"
  debugArgName = "--dist-debug"
  noOptName = "--dist-no-opt"
  
  nativeArgNames = [ helpArgName, withEgGitArgName, \
    extraRepoArgName, notExtraRepoArgName, notBaseRepoArgName, \
    versionFileName, versionFile2Name, noColorArgName, debugArgName, noOptName ]

  # Find a default eg/dist to use

  # Select a version of eg or git (see above help documentation)

  defaultEgGit = "eg" # Try system eg
  if not commandExists(defaultEgGit):
   realScriptBaseDir = os.path.dirname(os.path.abspath(os.path.realpath(__file__)))
   defaultEgGit = realScriptBaseDir+"/eg" # Try offical TriBITS eg
  if not commandExists(defaultEgGit):
    defaultEgGit = "git" # Try system git
  if not commandExists(defaultEgGit):
    defaultEgGit = "" # Give up and make the user specify
  
  clp.add_option(
    withEgGitArgName, dest="egGit", type="string",
    default=defaultEgGit,
    help="The (path) to the eg/git executable to use for each git repo command (default='"+defaultEgGit+"')"
    )
  
  clp.add_option(
    extraRepoArgName, dest="extraRepos", type="string",
    default="",
    help="Comma seprated list of extra repos to forward eg/git commands to."
    +"  If the list is empty, it will look for a file called .egdist to"
    +" get the list of extra repos seprated by newlines."
    )
  
  clp.add_option(
    notExtraRepoArgName, dest="notExtraRepos", type="string",
    default="",
    help="Comma seprated list of extra repos to *not* forward eg/git commands to."
    +"  This removes any repos from being processed that would otherwise be."
    )
  
  clp.add_option(
    notBaseRepoArgName, dest="processBaseRepo", action="store_false",
    help="If set, don't pass the eg/git conmmand on to the base git repo.",
    default=True )
  
  clp.add_option(
    versionFileName, dest="versionFile", type="string",
    default="",
    help="Path to a file contains a list of extra repo directories and git versions (replaces _VERSION_)."
    )
  
  clp.add_option(
    versionFile2Name, dest="versionFile2", type="string",
    default="",
    help="Path to a second file contains a list of extra repo directories and git versions (replaces _VERSION2_)."
    )
  
  clp.add_option(
    noColorArgName, dest="useColor", action="store_false",
    help="If set, don't use color in the output for egdist (better for output to a file).",
    default=True )
  
  clp.add_option(
    debugArgName, dest="debug", action="store_true",
    help="If set, then debugging info is printed.",
    default=False )

  clp.add_option(
    noOptName, dest="noOpt", action="store_true",
    help="If set, then no eg/git commands will be run but instead will just be printed.",
    default=False )
  
  #
  # B) Pull the native commandline arguments out of the commandline
  #
  
  argv = sys.argv[1:]
  nativeArgs = []
  otherArgs = []
  
  for arg in argv:
    #print "\narg = '"+arg+"'"
    matchedNativeArg = False
    for nativeArgName in nativeArgNames:
      #print "\nnativeArgName ='"+nativeArgName+"'"
      currentArgName = arg[0:len(nativeArgName)]
      #print "currentArgName = '"+currentArgName+"'"
      if currentArgName == nativeArgName:
        #print "\nMatches native arg!"
        nativeArgs.append(arg)
        matchedNativeArg = True
        break
    if not matchedNativeArg:
      #print "\nDoes *not* match native arg!"
      otherArgs.append(arg)
    #print "\nnativeArgs =", nativeArgs
    #print "otherArgs =", otherArgs
  
  #print "\nnativeArgs =", nativeArgs
  #print "otherArgs =", otherArgs
  
  (options, args) = clp.parse_args(nativeArgs)

  # Check for valid usage

  if len(otherArgs) == 0:
    print addColorToErrorMsg(options.useColor,
      "Must specify eg/git command. See 'eg/git --help' for options.")
    sys.exit(1)

  if not options.egGit:
    print addColorToErrorMsg(options.useColor,
      "Can't find eg or git, please set --with-eg-dist")
    sys.exit(2)

  # Get the list of extra repos
  
  if options.extraRepos:
    extraReposFullList = options.extraRepos.split(",")
  else:
    egdistfile = ".egdist"
    if os.path.exists(egdistfile):
      extraReposFullList = open(egdistfile, 'r').read().split()
    else:
      extraReposFullList = []

  # Get list of not extra repos

  if options.notExtraRepos:
    notExtraReposFullList = options.notExtraRepos.split(",")
  else:
    notExtraReposFullList = []

  return (options, otherArgs, extraReposFullList, notExtraReposFullList)


# Requote commandline arguments into an array
def requoteCmndLineArgsIntoArray(inArgs):
  argsArray = []
  for arg in inArgs:
    splitArg = arg.split("=")
    newArg = None
    if len(splitArg) == 1:
      newArg = arg
    else:
      newArg = splitArg[0]+"="+'='.join(splitArg[1:])
    #print "\nnewArg =", newArg                                                                           
    argsArray.append(newArg)
  return argsArray


# Get a data-structure for a set of repos from a string
def getRepoVersionDictFromRepoVersionFileString(repoVersionFileStr):
  repoVersionFileStrList = repoVersionFileStr.split("\n")
  repoVersionDict = {}  
  i = 0
  while i < len(repoVersionFileStrList):
    #print "i = ", i
    repoDirLine = repoVersionFileStrList[i]
    #print "repoDirLine = '"+repoDirLine+"'"
    if repoDirLine[0:3] == "***":
      repoDir = repoDirLine.split(":")[1].strip()
      #print "repoDir = '"+repoDir+"'"
      repoVersionLine = repoVersionFileStrList[i+1]
      #print "repoVersionLine = '"+repoVersionLine+"'"
      repoSha1 = repoVersionLine.split(" ")[0].strip()
      #print "repoSha1 = '"+repoSha1+"'"
      repoVersionDict.update({repoDir : repoSha1})
    else:
      break
    if repoVersionFileStrList[i+2][0:3] == "***":
      # Has no summary line
      i = i + 2
    else:
      # Has a summary line
      i = i + 3
  return repoVersionDict


# Get a data-structure for a set of repos from a file
def getRepoVersionDictFromRepoVersionFile(repoVersionFileName):
  if repoVersionFileName:
    repoVersionFileStr = open(repoVersionFileName, 'r').read()
    return getRepoVersionDictFromRepoVersionFileString(repoVersionFileStr)
  else:
    None


def assertAndGetRepoVersionFromDict(repoDirName, repoVersionDict):
  if repoVersionDict:
    repoSha1 = repoVersionDict.get(repoDirName, "")
    if not repoSha1:
      print addColorToErrorMsg(options.useColor,
        "Extra repo '"+repoDirName+"' is not in the list of extra repos "+\
        str(repoVersionDict.keys()[1:])+" read in from version file.")
      sys.exit(3)
    return repoSha1
  else:
    return ""


def replaceRepoVersionInCmndLineArg(cmndLineArg, verToken, repoDirName, repoSha1):
  if repoSha1:
    newCmndLineArg = re.sub(verToken, repoSha1, cmndLineArg)
    return newCmndLineArg
  return cmndLineArg  


def replaceRepoVersionInCmndLineArgs(cmndLineArgsArray, repoDirName, \
  repoVersionDict, repoVersionDict2 \
  ):
  #print "repoDirName =", repoDirName
  repoSha1 = assertAndGetRepoVersionFromDict(repoDirName, repoVersionDict)
  repoSha1_2 = assertAndGetRepoVersionFromDict(repoDirName, repoVersionDict2)
  #print "repoSha1 =", repoSha1
  #print "repoSha1_2 =", repoSha1_2
  cmndLineArgsArrayRepo = []
  for cmndLineArg in cmndLineArgsArray:
    #print "cmndLineArg =", cmndLineArg
    newCmndLineArg = replaceRepoVersionInCmndLineArg(cmndLineArg, \
      "_VERSION_", repoDirName, repoSha1)
    #print "newCmndLineArg =", newCmndLineArg
    newCmndLineArg = replaceRepoVersionInCmndLineArg(newCmndLineArg, \
      "_VERSION2_", repoDirName, repoSha1_2)
    #print "newCmndLineArg =", newCmndLineArg
    cmndLineArgsArrayRepo.append(newCmndLineArg)
  return cmndLineArgsArrayRepo


# Generate the command line arguments
def runRepoCmnd(options, cmndLineArgsArray, repoDirName, baseDir, \
  repoVersionDict, repoVersionDict2 \
  ):
  cmndLineArgsArryRepo = replaceRepoVersionInCmndLineArgs(cmndLineArgsArray, \
    repoDirName, repoVersionDict, repoVersionDict2)
  egCmndArray = [ options.egGit ] + cmndLineArgsArryRepo
  runCmnd(options, egCmndArray)


# Determine if the repos should be processed or not
def shouldWeProcessExtraRepo(options, extraRepo, notExtraReposList):
  if not os.path.isdir(extraRepo): return False
  if extraRepo in notExtraReposList: return False
  return True
 

#
# Run the script
#

if __name__ == '__main__':

  (options, otherArgs, extraReposFullList, notExtraReposList) = getCommandlineOps()

  # Get the repo version files
  repoVersionDict = getRepoVersionDictFromRepoVersionFile(options.versionFile)
  repoVersionDict2 = getRepoVersionDictFromRepoVersionFile(options.versionFile2)
  
  # Reform the commandline arguments correctly
  #print "otherArgs =", otherArgs
  cmndLineArgsArray = requoteCmndLineArgsIntoArray(otherArgs)
  
  # Get the reference base directory
  baseDir = os.getcwd()
  
  if options.debug:
    print "*** Using eg/git:", options.egGit
  
  # Get the name of the base repo  
  baseDirArray = baseDir.split("/")
  baseRepoName = baseDirArray[-1]

  if options.processBaseRepo:
    print "" 
    print "*** Base Git Repo: "+addColorToRepoDir(options.useColor, baseRepoName)
    sys.stdout.flush()
    runRepoCmnd(options, cmndLineArgsArray, baseRepoName, baseDir,
      repoVersionDict, repoVersionDict2)
  
  for extraRepo in extraReposFullList:
    if shouldWeProcessExtraRepo(options, extraRepo, notExtraReposList):
      print "" 
      print "*** Git Repo: "+addColorToRepoDir(options.useColor, extraRepo)
      sys.stdout.flush()
      if options.debug:
        print "*** Changing to directory "+extraRepo
      os.chdir(extraRepo)
      runRepoCmnd(options, cmndLineArgsArray, extraRepo, baseDir, \
        repoVersionDict, repoVersionDict2)
      if options.debug:
        print "*** Changing to directory "+baseDir
      os.chdir(baseDir)
  
  print ""
  sys.stdout.flush()
  
