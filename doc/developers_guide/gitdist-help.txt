Usage: gitdist [gitdist arguments] [git arguments]
       gitdist [gitdist arguments] dist-repo-status

Run git recursively over extra repos and some extra tools for multi-repository
git projects.

Instead of typing:

  $ git [git arguments]

type:

  $ gitdist [gitdist options] [git arguments]

This will distribute git commands across all git repos listed, including the
base git repo.  The options in [gitdist options] are prefixed with '--dist-'
and are are pulled out off before passing the remaining arguments in [git
arguments] to all the git repos.  See --help to see the [gitdist options].

For example, consider the following git repos with other git repos cloned
under it:

  BaseRepo/
    .git/
    ExtraRepo1/
      .git/
    ExtraRep2/
      .git/

The gitdist command is run in the base git repo 'BaseRepo' and the git
commands are run on it as well as the git repos 'ExtraRepo1' and 'ExtraRepo2'.

The set of repos processed is determined by the argument --dist-extra-repos or
the files .gitdist or .gitdist.default.  If --dist-extra-repos="", then the
list of extra repos will be read from the file '.gitdist' in the current
working directory.  If the file '.gitdist' does not exist, then the list of
extra repos will be read from the file '.gitdist.default in' the current
working directory.  The format of this files '.gitdist' and '.gitdist.default'
is to have one repo directory/name per line as in:

  ExtraRepo1
  ExtraRepo2
  ...

where each repo is the relative path to the repo under the base git repo
(e.g. under 'BaseRepo/').  The file .gitdist.default is meant to be committed
to the base git repo so that gitdist is ready to use right away.

If an extra repository does not exist, then it will be ignored.  Therefore, be
careful to manually verify that the script recognizes the repositories that
you list.  The best way to do that is to type 'gitdist status'.

This script has no dependencies other than standard python 2.4 packages so it
can be copied to anywhere and used.

TIPS:

 - To see the status of all repos in a compact way, use the speical
   'dist-repo-status' command (see below).

 - To process only changed repos w.r.t. their tracking branch, run
   'gitdist --dist-mod-only [git arguments]'.  For example, to see
   the status of only changed repos use 'gitdist --dist-mod-only status'.

 - Use 'gitdist --no-pager <command> ...' to get the full output from
   all extra repos in one contiguous stream which can then be piped
   to 'less' or to a file to be read with emacs or vi (may also want
   to use --dist-no-color as well).

 - 'gitdist --help' will run gitdist help, not git help.  If you want git
   help, run raw 'git --help'.

 - By default, gitdist will use 'git' in the environment.  If it can't find
   'git' in the environment, it will require that the user specify the git
   command to run with --dist-use-git=<the command>.

 - To exclude processing either the base git repo and/or other git repos
   listed in .gitdist, pass in --dist-not-base-repo and/or
   --dist-not-extra-repos=RepoX,RepoZ,...  This provides complete control over
   what git repos the given git command is run.

SUMMARY OF REPO STATUS:

This script supports the special command 'dist-repo-status' which prints a
nice table showing the current status of all the repos.  For example, for the
repos shown above:

  $ gitdist dist-repo-status

prints a table like:

  ----------------------------------------------------------------
  | ID | Repo Dir        | Branch | Tracking Branch | C | M  | ? |
  |----|-----------------|--------|-----------------|---|----|---|
  |  0 | BaseRepo (Base) | dummy  |                 |   |  0 | 0 |
  |  1 | ExtraRepo1      | master | origin/master   | 1 |  2 | 0 |
  |  2 | ExtraRepo2      | HEAD   |                 |   | 25 | 4 |
  ----------------------------------------------------------------

If the option --dist-legend is passed in, it will print the legend:

Legend:
* ID: Repository ID, zero based (order git commands are run)
* Repo Dir: Relative to base repo (base repo shown first with '(Base)')
* Branch: current branch (or detached HEAD)
* Tracking Branch: Tracking branch (or empty if no tracking branch)
* C: number local commits w.r.t. tracking branch (empty if zero)
* M: number of tracked modified (uncommitted) files (empty if zero)
* ?: number of untracked, non-ignored files (empty if zero)

REPO VERSION FILES:

This script also supports the options --dist-version-file=<versionFile> and
--dist-version-file2=<versionFile2> which are used to provide different SHA1
versions for each repo.  Each of these version files is expected to represent
a compatible set of versions of the repos.

The format of these repo version files is a follows:

-----------------------------------------------------
*** Base Git Repo: BaseRepo
e102e27 [Mon Sep 23 11:34:59 2013 -0400] <author1@someurl.com>
First summary message
*** Git Repo: ExtraRepo1
b894b9c [Fri Aug 30 09:55:07 2013 -0400] <author2@someurl.com>
Second summary message
*** Git Repo: ExtraRepo2
97cf1ac [Thu Dec 1 23:34:06 2011 -0500] <author3@someurl.com>
Third summary message
...
-----------------------------------------------------

Each repository entry can have a summary message or not (i.e. use two or three
lines per repo in the file).  A compatible repo version file can be generated
with this script using, for example, using:

  $ gitdist --dist-no-color log -1 --pretty=format:"%h [%ad] <%ae>%n%s" \
    | grep -v "^$" &> RepoVersion.txt

using three lines per repo, or just:

  $ gitdist --dist-no-color log -1 --pretty=format:"%h [%ad] <%ae>" \
    | grep -v "^$" &> RepoVersion.txt

using two lines per repo in the output file.

This allows checking out consistent versions of the repos, diffing two
consistent versions of the repos, etc.

To checkout an older set of consistent versions of the set of repos, use:

  $ gitdist fetch origin
  $ gitdist --dist-version-file=RepoVersion.SomeDate.txt checkout _VERSION_

The '_VERSION_' string will be replaced with the SHA1 for each of the repos.

To tag and branch the set of repos using a consistent set of versions, use:

  $ gitdist --dist-version-file=RepoVersion.SomeDate.txt \
    tag -a some_tag _VERSION_

To diff two sets of versions of the repos, for example, use:

  $ gitdist --dist-version-file=RepoVersion.NewerDate.txt \
     --dist-version-file2=RepoVersion.OlderDate.txt \
     diff _VERSION_ ^_VERSION2_

Here, _VERSION_ is replaced by the SHA1s listed in RepoVersion.NewerDate.txt
and _VERSION2_ is replaced by the SHA1s listed in RepoVersion.OlderDate.txt.

One can construct any git commit taking one or two different repo version
arguments (SHA1s).

Note that the set of repos listed in the RepoVersion.txt file must be a
super-set of those processed by this script or an error will occur and the
script will stop.

Note that this Python script only depends on the Python 2.4+ standard modules
'sys', 'os', 'subprocess', and 're'. Also, it requires some compatible version
of 'git' at the very minimum as well of course.

COMPARISONS TO GIT SUBMODULE:

The purpose and functioning of gitdist has a lot in common with the build-in
git submodule command.  While git submodule is well suited for pulling in
externally developed git repos, git submodules are not well suited for
managing the co-development of multiple git repos.  A more detailed discussion
of different approaches to managing the development and integration of
multiple git repos, see the TriBITS Developers Guide.


Options:
  -h, --help            show this help message and exit
  --dist-use-git=USEGIT
                        The (path) to the git executable to use for each git
                        repo command (default='git')
  --dist-extra-repos=EXTRAREPOS
                        Comma-separated list of extra repos to forward git
                        commands to.  If the list is empty, it will look for a
                        file called .gitdist to get the list of extra repos
                        separated by newlines.
  --dist-not-extra-repos=NOTEXTRAREPOS
                        Comma separated list of extra repos to *not* forward
                        git commands to.  This removes any repos from being
                        processed that would otherwise be.
  --dist-not-base-repo  If set, don't pass the git command on to the base git
                        repo.
  --dist-version-file=VERSIONFILE
                        Path to a file contains a list of extra repo
                        directories and git versions (replaces _VERSION_).
  --dist-version-file2=VERSIONFILE2
                        Path to a second file contains a list of extra repo
                        directories and git versions (replaces _VERSION2_).
  --dist-no-color       If set, don't use color in the output for gitdist
                        (better for output to a file).
  --dist-debug          If set, then debugging info is printed.
  --dist-no-opt         If set, then no git commands will be run but instead
                        will just be printed.
  --dist-mod-only       If set, then the listed git command will be only be
                        run and output for the repo will only be produced if
                        the command 'git diff --name-only ^<tracking-branch>'
                        returns non-empty output where <tracking-branch> is
                        returned from 'rev-parse --abbrev-ref --symbolic-full-
                        name @{u}'.  In order words, if a git repo is
                        unchanged w.r.t. its tracking branch, then the git
                        command is skipped for that repo.  If a repo does not
                        have a tracking branch, then the repo will be skipped
                        as well.  Therefore, be careful to first run with
                        dist-local-stat to see the status of each local repo
                        to know which repos don't have tracking branches.
  --dist-legend         If set, then a legend will be printed below the repo
                        summary table for the special dist-repo-status
                        command.  Only applicable with dist-repo-status.
