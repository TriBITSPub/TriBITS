Usage: snapshot-dir.py [OPTIONS]

This tool snapshots the contents of an origin directory ('orig-dir') to
destination directory ('dest-dir') and creates linkages between the two git
repos in the commit message in the 'dest-dir' git branch.  The command 'git'
must be in the path for this script to be used.

To demonstrate how this script is used, consider the desire to snapshot the
directory tree:

  <some-orig-base-dir>/orig-dir/

and duplicate it in the directory tree

  <some-dest-base-dir>/dest-dir/

Here, the directories can be any two directories from local git repos with any
names as long as they are given a final '/' at the end.  Otherwise, if you are
missing the final '/', then rsync will copy the contents from 'orig-dir' into
a subdir of 'dest-dir' which is usually not what you want.

A typical case is to have snapshot-dir.py soft linked into orig-dir/ to allow
a simple sync process.  This is the case, for example, with the 'tribits'
source tree.  The linked-in location of snapshot-dir.py gives the default
'orig-dir' directory automatically (but can be overridden with --orig-dir
option).

When snapshot-dir.py is soft-linked into the 'orig-dir' directory base, the
way to run this script would be:

  $ cd <some-dest-base-dir>/dest-dir/
  $ <some-orig-base-dir>/orig-dir/snapshot-dir.py

By default, this assumes that git repos are used for both the 'orig-dir' and
'dest-dir' locations.  The info about the origin of the snapshot from
'orig-dir' is recorded in the commit message of the 'dest-dir' git repo to
provide tracability for the versions (see below).

To sync between any two arbitrary directories invoking this scripot from any
directory location, one can do:

  $ <some-base-dir>/snapshot-dir.py \
    --orig-dir=<some-orig-dir>/ \
    --dest-dir=<some-dest-dir>/

Note the trailing '/' is critical for the correct functioning of rsync.

By default, this script does the following:

1) Asserts that the git repo for 'orig-dir' is clean (i.e. no uncommitted
   files, no unknown files, etc.).  This can be disabled by passing in
   --allow-dirty-orig-dir.

2) Asserts that the git repo for <some-dest-dir>/ is clean (see above).  This
   can be disabled by passing in --allow-dirty-dest-dir.

3) Run 'rsync -av --delete' to copy the contents from 'orig-dir' to
   'dest-dir', excluding the '.git/' directory if it exists in either git repo
   dir.  After this runs, <some-dest-dir>/ should be an exact duplicate of
   <some-orig-dir>/ (except for otherwise noted excluded files).  This rsync
   will delete any files in 'dest-dir' that are not in 'orig-dir'.  Note that
   if there are ignored untracked files, then the copied .gitignore files
   should avoid showing them as tracked or unknown files in the 'dest-dir' git
   repo as well.

4) Run 'git add .' in <some-dest-dir>/ to stage any new files.  Note that git
   will automatically stage deletes for any files removed by the 'rsync -av
   --delete' command!

5) Get the git remote URL from the orig-dir git repo, and the git log for the
   last commit for the directory from orig-dir.  This information is used to
   define perfect tracing of the version info when doing the snapshot.

6) Commit the updated dest-dir directory using a commit message with the
   orig-dir repo URL and log info.  This will only commit files in 'dest-dir'
   and not in other directories in the destination git repo!

NOTES:

* This script allows the syncing between base git repos or subdirs within git
  repos.  This is allowed because the rsync command is told to ignore the
  .git/ directory when syncing.

* Snapshotting with this script will create an exact duplicate of 'orig-dir'
  in 'dest-dir' and therefore if there are any local changes to the files or
  chagnes after the last snapshot, they will get wiped out.  To avoid this, do
  the snapshot on a branch in the 'dest-dir' git repo, then merge that branch
  into the master branch in 'dest-dir' repo that has the local changes.  As
  long as there are no merge conflicits, this will preserve local changes for
  the mirrored directories and files.  This works amazingly well in most
  cases.


Options:
  -h, --help            show this help message and exit
  --show-defaults       Show the default option values and do nothing at all.
  --orig-dir=ORIGDIR    Original directory that is the source for the
                        snapshoted directory.  Note that it is important to
                        add a final /' to the directory name.  The default is
                        the directory where this script lives (or is
                        softlinked).  [default: '/home/8vt/PROJECTS/Trilinos.b
                        ase/Trilinos/cmake/tribits/']
  --dest-dir=DESTDIR    Destination directory that is the target for the
                        snapshoted directory.  Note that a final '/' just be
                        added or the origin will be added as subdir.  The
                        default dest-dir is current working directory.
                        [default: '/home/8vt/PROJECTS/Trilinos.base/Trilinos/c
                        make/tribits/doc/developers_guide/']
  --assert-clean-orig-dir
                        Check that orig-dir is committed and clean. [default]
  --allow-dirty-orig-dir
                        Skip clean check of orig-dir.
  --assert-clean-dest-dir
                        Check that dest-dir is committed and clean. [default]
  --allow-dirty-dest-dir
                        Skip clean check of dest-dir.
